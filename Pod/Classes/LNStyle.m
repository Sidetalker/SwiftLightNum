//
//  LNStyle.m
//  SwiftLightNum
//
//  Created by Kevin Sullivan on 2/11/15.
//  Copyright (c) 2015 Ibex Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "LNStyle.h"


@implementation LNStyle

#pragma mark Cache

static NSShadow* _shadowLarge = nil;
static NSShadow* _shadowSmall = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Shadows Initialization
    _shadowLarge = [NSShadow shadowWithColor: UIColor.blackColor offset: CGSizeMake(0.1, -0.1) blurRadius: 5];
    _shadowSmall = [NSShadow shadowWithColor: UIColor.blackColor offset: CGSizeMake(0.1, -0.1) blurRadius: 2.5];

}

#pragma mark Shadows

+ (NSShadow*)shadowLarge { return _shadowLarge; }
+ (NSShadow*)shadowSmall { return _shadowSmall; }

#pragma mark Drawing Methods

+ (void)drawLightNumButtonWithFrame: (CGRect)frame colorBackground: (UIColor*)colorBackground colorStroke: (UIColor*)colorStroke cornerRadius: (CGFloat)cornerRadius strokeWidth: (CGFloat)strokeWidth fontSize: (CGFloat)fontSize
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame)) cornerRadius: cornerRadius];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, LNStyle.shadowSmall.shadowOffset, LNStyle.shadowSmall.shadowBlurRadius, [LNStyle.shadowSmall.shadowColor CGColor]);
    [colorBackground setFill];
    [rectanglePath fill];
    CGContextRestoreGState(context);

    [colorStroke setStroke];
    rectanglePath.lineWidth = strokeWidth;
    [rectanglePath stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    {
        NSString* textContent = @"1";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont boldSystemFontOfSize: fontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }
}

@end



@implementation NSShadow (PaintCodeAdditions)

- (instancetype)initWithColor: (UIColor*)color offset: (CGSize)offset blurRadius: (CGFloat)blurRadius
{
    self = super.init;
    if (self)
    {
        self.shadowColor = color;
        self.shadowOffset = offset;
        self.shadowBlurRadius = blurRadius;
    }
    return self;
}

+ (instancetype)shadowWithColor: (UIColor*)color offset: (CGSize)offset blurRadius: (CGFloat)blurRadius
{
    return [self.alloc initWithColor: color offset: offset blurRadius: blurRadius];
}

- (void)set
{
    CGContextSetShadowWithColor(UIGraphicsGetCurrentContext(), self.shadowOffset, self.shadowBlurRadius, [self.shadowColor CGColor]);
}

@end
